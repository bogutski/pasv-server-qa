{
	"info": {
		"_postman_id": "ed691929-55a4-495b-bb4c-aba8dd9d8c56",
		"name": "USER Admin",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "45d71f05-ad97-4493-ac0c-66330ad7f425",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"token\", jsonData.token);\r",
							"pm.environment.set(\"userId\", jsonData.userId);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Email confirmation is true\", () => {\r",
							"    pm.expect(jsonData.user.emailConfirmation.confirmed).to.be.false;  // first option (both are true)\r",
							"});\r",
							"\r",
							"pm.test(\"Phone confirmation is true\", () => {\r",
							"    pm.expect(jsonData.user.phoneConfirmation.confirmed).to.equal(false); // second option (both are true)\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Server header is present\", function () {\r",
							"    pm.response.to.have.header(\"Server\");\r",
							"});\r",
							"\r",
							"pm.test(\"Connection header is present\", function () {\r",
							"    pm.response.to.have.header(\"Connection\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header value is application/json\", function () {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains name\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"});\r",
							"\r",
							"pm.test(\"User role has admin status\", () => {\r",
							"    pm.expect(jsonData.user.roles).to.include(\"admin\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains token\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"token\");\r",
							"});\r",
							"\r",
							"pm.test(\"Token has length\", () => {\r",
							"    pm.expect(jsonData.token).to.have.length > 0;\r",
							"});\r",
							"\r",
							"pm.test(\"Password in body is null\", () => {\r",
							"    pm.expect(jsonData.user.password).to.equal(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains userId\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"userId\");\r",
							"});\r",
							"\r",
							"pm.test(\"Phone length to be 12 symbols\", function(){\r",
							"    pm.expect(jsonData.user.phone).to.have.lengthOf(12);\r",
							"});\r",
							"\r",
							"pm.test(\"UserID is per requirements\", function(){\r",
							"    pm.expect(jsonData.userId).to.match(/[a-fA-F0-9]/);\r",
							"});\r",
							"\r",
							"pm.test(\"Active\", function () {\r",
							"    pm.expect(jsonData.user.active).to.eql(true);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n  \"email\": \"admin@test.com\", \r\n  \"password\": \"11111\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/user/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reset password",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a44f2958-d07c-4b9d-b73c-49ea5b12f718",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status is 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains message\", () => {",
							"      pm.expect(pm.response.text()).to.include(\"message\");",
							"});",
							"",
							"pm.test(\"Response contains success\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"success\");",
							"});",
							"",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response time less than 5000ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n  \"email\": \"admin@test.com\"\r\n}"
				},
				"url": {
					"raw": "{{host}}/user/password/reset/request",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"password",
						"reset",
						"request"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get hash",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9ecd2874-5a82-4a30-abfb-b5ac66be9d4e",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"Hash\", jsonData.hash);",
							"",
							"pm.test(\"Status is 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains hash\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"hash\");",
							"});",
							"",
							"pm.test(\"Response contains history\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"history\");",
							"});",
							"",
							"pm.test(\"Response contains date\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"date\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/user/hash/{{userId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"hash",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reset Password Valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "97d34d2a-f2d5-4deb-b4e0-7fb385bfb965",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Respose contains message, success, fail\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"message\");",
							"});",
							"",
							"pm.test(\"Response contains success\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"success\");",
							"});",
							"",
							"pm.test(\"Response id success\", () => {",
							"    pm.expect(jsonData.success).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"userId\": \"{{userId}}\",\n\t\"hash\": \"{{Hash}}\"\n}"
				},
				"url": {
					"raw": "{{host}}/user/password/reset/valid",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"password",
						"reset",
						"valid"
					]
				}
			},
			"response": []
		},
		{
			"name": "Hash validation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2ad5ddbd-2f4b-4393-907c-ea2514e38981",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status cod is 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains message\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"message\");",
							"});",
							"",
							"pm.test(\"Response contains success\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"success\");",
							"});",
							"",
							"pm.test(\"Response is success\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"hash\": \"{{Hash}}\",\n\t\"userId\": \"{{userId}}\"\n}"
				},
				"url": {
					"raw": "{{host}}/user/password/reset/valid",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"password",
						"reset",
						"valid"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set new password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "740dafcc-a573-40d5-83ac-73daf666ab6f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "117b8278-5e95-45e3-b554-8d712f892f50",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200 Ok\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains message\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"message\");",
							"});",
							"",
							"pm.test(\"Response contains success\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"success\");",
							"});",
							"",
							"pm.test(\"Success is true\", () => {",
							"    pm.expect(jsonData.success).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"userId\": \"{{userId}}\",\n\t\"hash\": \"{{Hash}}\",\n\t\"password\": \"11111\"\n}"
				},
				"url": {
					"raw": "{{host}}/user/password/reset/new",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"password",
						"reset",
						"new"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user all",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "89c9dba7-7218-41c0-bb51-4b44e36841b7",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains payload\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"payload\");",
							"});",
							"",
							"pm.test(\"Response time less than 5000ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"pm.test(\"Response is success\", () => {",
							"    pm.expect(jsonData.success).to.equal(true);",
							"});",
							"",
							"pm.test(\"Response contains massage\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"message\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/user",
					"host": [
						"{{host}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a06987b5-7b0b-4892-a3d3-792a1de95337",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains roles\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"roles\");",
							"});",
							"",
							"pm.test(\"Roles status is admin\", () => {",
							"    pm.expect(jsonData.roles[0]).to.equal(\"admin\");",
							"});",
							"",
							"pm.test(\"Response contains name\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"name\");",
							"});",
							"",
							"pm.test(\"User is active\", () => {",
							"    pm.expect(jsonData.active).to.equal(true);",
							"});",
							"",
							"pm.test(\"Response time less than 5000ms\", () => {",
							"    pm.expect(pm.response.responseTime).be.below(5000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/user/{{userId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b2b889e7-a3db-449a-82b9-668bda072cb1",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains success\", () => {",
							"    pm.expect(pm.response.text()).to.include(\"success\");",
							"});",
							"",
							"pm.test(\"Response is success\", () => {",
							"    pm.expect(jsonData.success).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t \"englishLevel\": \"native\"\n}"
				},
				"url": {
					"raw": "{{host}}/user/{{userId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	]
}